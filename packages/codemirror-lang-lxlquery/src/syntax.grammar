@top Query { term* }

@skip { space }

term {
  freetext |
  Qualifier |
  Group |
  BooleanQuery |
  UQuery |
  doubleNegative
}

Qualifier {
  (QualifierKey QualifierOperator QualifierValue) | reserved
}

QualifierKey {
  Identifier | String
}

QualifierValue {
  Identifier | String | GroupInQualifier
}

QualifierOperator {
  EqualOperator | CompareOperator
}

Group {
  "(" (freetext | Group | Qualifier | BooleanQuery | UQuery)+ ")"
}

BooleanQuery { 
  (freetext | Qualifier | Group | UQuery) BooleanOperator (freetext | Qualifier | Group | UQuery) 
  (BooleanOperator (freetext | Qualifier | Group | UQuery))+?
}

GroupInQualifier {
  "(" (freetext | booleanQueryInQualifier | GroupInQualifier | UQuery)+ ")"
}

booleanQueryInQualifier { 
  (freetext | GroupInQualifier | UQuery) BooleanOperator (freetext | GroupInQualifier | UQuery) 
  (BooleanOperator (freetext | GroupInQualifier | UQuery))+?
}

UQuery { 
  uOperator (freetext | Qualifier | Group) 
}

freetext {
  (Identifier | String )
}

doubleNegative { uOperator uOperator (freetext | Qualifier | Group)  }

@tokens {

  String { '"' (!["\\] | "\\" _)* '"' }

  EqualOperator { ":" |Â "=" }

  CompareOperator { ">" | "<" | ">=" | "<=" }

  BooleanOperator { "AND" | "OR" }

  uOperator { "NOT" | "!" }

  reserved { "includeEplikt" | "includePreliminary" }

  space { @whitespace+ }

  Identifier { ![:><=()!"\ ]+ }

  @precedence { BooleanOperator, uOperator, reserved, Identifier, space }
}

@detectDelim