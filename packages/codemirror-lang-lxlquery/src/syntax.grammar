@top Program { orcomb }

@skip { space }

orcomb { andcomb ( OrOperator andcomb )* }
andcomb { term ( AndOperator term | term )* }
term { String | Group | UTerm | Qualifier }
Group { "(" orcomb ")" }
UTerm { UOperator term }
String { strliteral | str }
Qualifier { 
  ( QualifierKey { String } QualifierOperator { bOperator } QualifierValue { String } ) | 
  ( QualifierKey { String } QualifierOperator { bOperatorEq } QualifierValue { term } ) |
  filterAliases 
}

@tokens {
  OrOperator { "OR" }
  AndOperator { "AND" }
  UOperator { "!" | "NOT" }
  bOperator {"<" | ">" | "<=" | ">=" }
  bOperatorEq { ":" | "=" }
  strliteral { '"' (!["\\] | "\\" _)* '"' }
  str { ![:><=()!"\ ]+ }
  filterAliases { "includeEplikt" | "includePreliminary" }
  space { @whitespace+ }

  @precedence { OrOperator, AndOperator, UOperator, bOperator, bOperatorEq, reserved, str, space}
}

@detectDelim