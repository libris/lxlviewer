# PARSE - normal parse

AAA BBB AND (CCC OR DDD)

==>

Query(String String AndOperator Group(String OrOperator String))


# implicit and group

AAA BBB (CCC OR DDD)

==>

Query(String String Group(String OrOperator String))


# parse negative

!AAA

==>

Query(UTerm (UOperator String))


# parse negative 2

NOT AAA

==>

Query(UTerm (UOperator String))


# parse negative 3

NOT (AAA)

==>

Query(UTerm (UOperator Group (String)))


# crazy grouping

AAA BBB AND (CCC OR DDD OR (EEE) AND (FFF OR GGG))

==>

Query(
  String,
  String,
  AndOperator,
  Group(
    String,
    OrOperator,
    String,
    OrOperator,
    Group(
      String
    ),
    AndOperator,
    Group(
      String,
      OrOperator,
      String
    )
  )
)


# fail crazy grouping with bad parens

AAA BBB AND (CCC OR DDD OR (EEE) AND (FFF OR GGG)

==>

Query(
  String,
  String,
  AndOperator,
  Group(
    String,
    OrOperator,
    String,
    OrOperator,
    Group(
      String
    ),
    AndOperator,
    Group(
      String,
      OrOperator,
      String
    ),
    ⚠
  )
)


# super basic parse

AAA

==>

Query(String)


# super basic parse 2

AAA BBB

==>

Query(String String)


# basic code

förf:AAA

==>

Query(Qualifier(QualifierKey(String) QualifierOperator QualifierValue(String)))


# basic code 2

förf=AAA

==>

Query(Qualifier(QualifierKey(String) QualifierOperator QualifierValue(String)))


# quoted code

förf:"AAA"

==>

Query(Qualifier(QualifierKey(String) QualifierOperator QualifierValue(String)))


# quoted code 2

förf:"förf:"

==>

Query(Qualifier(QualifierKey(String) QualifierOperator QualifierValue(String)))


# quoted code 3

"förf:":"AAA"

==>

Query(Qualifier(QualifierKey(String) QualifierOperator QualifierValue(String)))


# quoted code 4

"Kod: författare och annat:":("AAA" OR BBB)

==>

Query(Qualifier(QualifierKey(String) QualifierOperator QualifierValue(Group(String OrOperator String))))


# code group

förf:(AAA)

==>

Query(Qualifier(QualifierKey(String) QualifierOperator QualifierValue(Group(String))))


# code group 2

förf:(AAA OR BBB AND CCC)

==>

Query(
  Qualifier(
    QualifierKey(
      String
    ),
    QualifierOperator,
    QualifierValue(
      Group(
        String,
        OrOperator,
        String,
        AndOperator,
        String
      )
    )
  )
)


# bad use of code

förf:

==>

Query(Qualifier(QualifierKey(String) QualifierOperator ⚠))


# bad use of code 2

AAA OR förf:

==>

Query(String OrOperator Qualifier(QualifierKey(String) QualifierOperator ⚠))


# don't parse missing or-tail

AAA BBB AND (CCC OR)

==>

Query(String String AndOperator Group(String OrOperator ⚠))


# don't parse missing and-tail

AAA BBB AND

==>

Query(String String AndOperator ⚠)


# code binop

published: 2022

==>

Query(Qualifier(QualifierKey(String) QualifierOperator QualifierValue(String)))


# code binop 2

published:2022

==>

Query(Qualifier(QualifierKey(String) QualifierOperator QualifierValue(String)))


# code binop 3

published=2022

==>

Query(Qualifier(QualifierKey(String) QualifierOperator QualifierValue(String)))


# code binop 4

published<2022

==>

Query(Qualifier(QualifierKey(String) QualifierOperator QualifierValue(String)))


# code binop 5

published>=2022

==>

Query(Qualifier(QualifierKey(String) QualifierOperator QualifierValue(String)))


# fail compare with group

AAA < (CCC)

==>

Query(Qualifier(QualifierKey(String) QualifierOperator ⚠ ) Group(String))


# fail compare with not

AAA < ! CCC

==>

Query(Qualifier(QualifierKey(String) QualifierOperator ⚠ ) UTerm(...))


# fail compare with not 2

AAA < NOT CCC

==>

Query(Qualifier(QualifierKey(String) QualifierOperator ⚠ ) UTerm(...))


# fail compare with like

AAA < ~ CCC

==>

Query(Qualifier(QualifierKey(String) QualifierOperator ⚠ QualifierValue(String)))


# codes and quotes

"bf:subject":"lcsh:Physics" AND "bf:subject"

==>

Query(Qualifier(QualifierKey(String) QualifierOperator QualifierValue(String)) AndOperator String)



# ----- freetext string

"2001: A Space Odyssey"

==>

Query(String)


# negative group

!(AAAA OR BBBB)

==>

Query(UTerm(UOperator Group(String OrOperator String)))


# fail boolean query

OR AND sommar

==>

Query(⚠(OrOperator) ⚠(AndOperator) String)


# fail boolean query 2

NOT sommar NOT OR vinter

==>

Query(UTerm(UOperator String) UTerm(UOperator ⚠) OrOperator String)


# fail boolean query 3

NOT

==>

Query(UTerm(UOperator ⚠))


# fail unclosed quote

"Astrid Lind

==>

Query(⚠ String String)


# fail empty paren

()

==>

Query(Group(String(⚠)))


# uterm code

NOT key:value

==>

Query(UTerm(UOperator Qualifier(QualifierKey(String) QualifierOperator QualifierValue(String))))


# uterm code 2

key:(NOT value)

==>

Query(Qualifier(QualifierKey(String) QualifierOperator QualifierValue(Group(UTerm(UOperator String)))))


# other filters: include E-plikt

Pippi includeEplikt

==>

Query(String Qualifier)


# other filters: include preliminary

includePreliminary Pippi

==>

Query(Qualifier String)
